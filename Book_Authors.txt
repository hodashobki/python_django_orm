1-Query: Create 5 books with the following names: C Sharp, Java, Python, PHP, Ruby
csharp=Book.objects.create(title="CSharp",desc="is a programming language developed by Microsoft that runs on the .NET Framework")
>>> java=Book.objects.create(title="Java",desc="is the world's leading programming language and platform. AdoptOpenJDK uses infrastructure")
python=Book.objects.create(title="Python",desc="Python is a programming language that lets you work quickly")
>>> ruby=Book.objects.create(title="Ruby",desc="A dynamic, open source programming language with a focus on simplicity and productivity")
>>> php=Book.objects.create(title="PHP",desc="PHP is a server scripting language, and a powerful tool for making dynamic and interactive Web pages")

2-Query: Create 5 different authors: Jane Austen, Emily Dickinson, Fyodor Dostoevsky, William Shakespeare, Lau Tzu
  jane=Author.objects.create(first_name="Jane",last_name="Austen")
>>> emily=Author.objects.create(first_name="Emily",last_name="Dickinson")
>>> fyodor=Author.objects.create(first_name="Fyodor",last_name="Dostoevsky")
>>> william=Author.objects.create(first_name="William",last_name="Shakespeare")
>>> lau=Author.objects.create(first_name="Lau",last_name="Tzu")

3-Add a new text field in the authors table called 'notes'.
>python manage.py makemigrations
You are trying to add a non-nullable field 'notes' to author without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
python manage.py migrate
python manage.py shell
from bookapp.models import *

4-Query: Change the name of the C Sharp book to C#
 f=Book.objects.get(id=1)
>>> f.title="C#"
>>> f.save()

5-Query: Change the first name of the 4th author to Bill
c=Author.objects.get(id=4)
>>> c.first_name="Bill"
>>> c.save()

6-Query: Assign the first author to the first 2 books
book1=Book.objects.get(id=1)
>>> author1=Author.objects.get(id=1)
>>> author1.books.add(book1)
book2=Book.objects.get(id=2)
>>> author1.books.add(book2)

7-author2.books.add(book1)
>>> author2.books.add(book2)
>>> author2.books.add(book3)

8-Query: Assign the third author to the first 4 books
 author3.books.add(book1)
>>>  author3.books.add(book2)
author3.books.add(book3)
>>> author3.books.add(book4)

9-Query: Assign the fourth author to the first 5 books (or in other words, all the books)
author5.books.add(book1,book2,book3,book4,book5)

10-Query: Retrieve all the authors for the 3rd book
 book3.authors.all()
<QuerySet [<Author: Author object (2)>, <Author: Author object (3)>, <Author: Author object (5)>]>

11-Query: Remove the first author of the 3rd book
 book3.authors.remove(author2)

12-Query: Add the 5th author as one of the authors of the 2nd book
author5.books.add(book2)

13-Query: Find all the books that the 3rd author is part of
author3.books.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>]>

14-Query: Find all the authors that contributed to the 5th book
book5.authors.all()
<QuerySet [<Author: Author object (5)>]>
 book5.authors.all().values()
<QuerySet [{'id': 5, 'first_name': 'Lau', 'last_name': 'Tzu', 'notes': 'Add notes later', 'created_at': datetime.datetime(2021, 5, 23, 16, 52, 55, 326998, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 16, 52, 55, 326998, tzinfo=<UTC>)}]>
